# Note: this targets Nvida Turing architecture, for Telsa T4 GPUs --> arch 75, see DCMAKE_CUDA_ARCHITECTURES
# modified for Tesla GA10x cards, arch 86
# see: https://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards/
build:
  cuda: "11.8.0"
  gpu: true
  python_version: "3.10"
  system_packages:
    - "build-essential"
    - "cmake"
    - "curl"
    - "ffmpeg"
    - "git"
    - "libatlas-base-dev"
    - "libboost-filesystem-dev"
    - "libboost-graph-dev"
    - "libboost-program-options-dev"
    - "libboost-system-dev"
    - "libboost-test-dev"
    - "libhdf5-dev"
    - "libcgal-dev"
    - "libeigen3-dev"
    - "libflann-dev"
    - "libfreeimage-dev"
    - "libgflags-dev"
    - "libglew-dev"
    - "libgoogle-glog-dev"
    - "libmetis-dev"
    - "libprotobuf-dev"
    - "libqt5opengl5-dev"
    - "libsqlite3-dev"
    - "libsuitesparse-dev"
    - "nano"
    - "protobuf-compiler"
    - "python-is-python3"
    - "python3.10-dev"
    - "python3-pip"
    - "qtbase5-dev"
    - "sudo"
    - "vim-tiny"
    - "wget"
  run:
    - git clone --branch v0.6.0 https://github.com/google/glog.git --single-branch && cd glog && mkdir build && cd build && cmake .. && make -j `nproc` && make install && cd ../.. && rm -rf glog
    - export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/lib"
    - git clone --branch 2.1.0 https://ceres-solver.googlesource.com/ceres-solver.git --single-branch && cd ceres-solver && git checkout $(git describe --tags) && mkdir build && cd build && cmake .. -DBUILD_TESTING=OFF -DBUILD_EXAMPLES=OFF && make -j `nproc` && make install && cd ../.. && rm -rf ceres-solver
    - git clone --branch 3.8 https://github.com/colmap/colmap.git --single-branch && cd colmap && mkdir build && cd build && cmake .. -DCUDA_ENABLED=ON -DCMAKE_CUDA_ARCHITECTURES=86 && make -j `nproc` && make install && cd ../.. && rm -rf colmap
    - useradd -m -d /home/user -g root -G sudo -u 1000 user
    - usermod -aG sudo user
    - echo "user:user" | chpasswd
    - echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
    - su user
    - cd /home/user
    - export PATH="${PATH}:/home/user/.local/bin"
    - python -m pip install --no-cache-dir --upgrade pip setuptools pathtools promise pybind11
    - git clone --branch v0.4.0 --recursive https://github.com/colmap/pycolmap.git && cd pycolmap && python -m pip install --no-cache-dir . && cd ..
    - git clone --branch master --recursive https://github.com/cvg/Hierarchical-Localization.git && cd Hierarchical-Localization && git checkout v1.4 && python -m pip install --no-cache-dir -e . && cd ..
    - git clone --branch v1.0 --recursive https://github.com/cvg/pyceres.git && cd pyceres && python -m pip install --no-cache-dir -e . && cd ..
    - git clone --recursive https://github.com/cvg/pixel-perfect-sfm.git && cd pixel-perfect-sfm && git reset --hard 40f7c1339328b2a0c7cf71f76623fb848e0c0357 && git clean -df && python3.10 -m pip install --no-cache-dir -e . && cd ..
    - python -m pip install --no-cache-dir omegaconf
    - export CUDA_VER=11.8 && CUDA_VER=118 && python -m pip install --no-cache-dir torch==2.0.1+cu${CUDA_VER} torchvision==0.15.2+cu${CUDA_VER} --extra-index-url https://download.pytorch.org/whl/cu${CUDA_VER}
    # Persist PATH, LD_LIBRARY_PATH to include CUDA, for TCNN, etc.
    - echo 'export PATH="/usr/local/cuda-11.8/bin:$PATH"' >> /root/.bashrc
    - echo 'export LD_LIBRARY_PATH="/usr/local/cuda-11.8/lib64:$LD_LIBRARY_PATH"' >> /root/.bashrc
    - echo 'export TCNN_CUDA_ARCHITECTURES=86' >> /root/.bashrc
    # Build tiny-cuda-nn
    - git clone --recursive https://github.com/NVlabs/tiny-cuda-nn.git
    - cd tiny-cuda-nn && export PATH="/usr/local/cuda-11.8/bin:$PATH" && export LD_LIBRARY_PATH="/usr/local/cuda-11.8/lib64:$LD_LIBRARY_PATH" && cmake . -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo && cmake --build build --config RelWithDebInfo -j
    - cd tiny-cuda-nn/bindings/torch && export TCNN_CUDA_ARCHITECTURES=86 && export PATH="/usr/local/cuda-11.8/bin:$PATH" && export LD_LIBRARY_PATH="/usr/local/cuda-11.8/lib64:$LD_LIBRARY_PATH" && python setup.py install
    - pip install nerfstudio=="1.0.1"
    - pip uninstall pymeshlab -y
    - git clone --recursive https://github.com/cnr-isti-vclab/PyMeshLab.git
    - DEBIAN_FRONTEND=noninteractive apt-get -y update
    - cd PyMeshLab/ && cd scripts/Linux && chmod +x 0_setup_env.sh && yes | ./0_setup_env.sh
    - cd PyMeshLab/ && cd scripts/Linux && chmod +x 1_build.sh && ./1_build.sh
    - cd PyMeshLab/ && pip install . # installs PyMeshLab, avoids missing Qt5 symbol
    - echo 'export LD_LIBRARY_PATH="/root/.pyenv/versions/3.10.13/lib/python3.10/site-packages/pymeshlab/lib/:/root/.pyenv/versions/3.10.13/lib/python3.10/site-packages/pymeshlab/lib/config:$LD_LIBRARY_PATH"' >> /root/.bashrc # import pymeshlab can now find it's .so objects
    - pip install gsplat
    - ns-install-cli
predict: "predict.py:Predictor"
image: "r8.im/robinsonkwame/nerfstudio-cli"
